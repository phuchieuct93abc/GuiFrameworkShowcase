<div class="getting-start">To enable the refactored GUI framwork you have to import the new custom JSF component into your ivy server/designer.
					
Download the jar file below. Copy this file into the webapps\ivy\WEB-INF\lib directory of your designer/server and restart ivy. 
You can also find it in our maven repository:
<a href="http://192.168.48.10/artifactory/simple/labs-release-local/ch/axonivy/fintech/guiframework/guiframework_component/">Guiframework Component</a>
	
Your project must depend on standard module:
<a href="https://192.168.110.51/svn/development/products/fintech/standard/trunk">Standard module</a>

Changes
The aim of the new version was to reduce necessary configuration for enabling the GUI framework. The following steps are no longer necessary anymore:
<ol>
	<li>Creating the event listener methods in the ivy html dialog process</li>
	<li>Adding both the BaseGuiWorkflow and ComponentContext as fields in the ivy dataclass</li>
	<li>A required BaseGuiFrameworkController java class for every dialog</li>
	<li>Notification listener ivy method and component parameter</li>
</ol>

The minimal necessary configuration is adding the new custom jsf component to your page:

<pre class="brush: xhtml">
&lt;gui:eventListeners dataModel=&quot;#{data.entity}&quot; dialogData=&quot;#{data}&quot; /&gt;
</pre>
<p class="bg-danger">This tag should be put inside a container tag: p:outputPanel, p:panelGrid</p>
Example
<pre class="brush: xhtml">

<p:outputPanel id="addressContainer">
  &lt;gui:eventListeners dataModel=&quot;#{data.address}&quot; dialogData=&quot;#{data}&quot; /&gt; 
    <h:panelGrid columns="2">
       <!-- content page here -->
    </h:panelGrid>
</p:outputPanel>

</pre>
<p>In the root component (see in <a href="#GUIFrameworkUsage-guicomponent">Gui Level</a>) you additionally have to add a rulePackage attribute:</p>
<p class="bg-danger">This tag should be placed right after <i>form</i> tag.</p>

As you see there are three attributes for this component:
<ol>
<li>dialogData: This is always the same EL #{data}</li>
<li>dataModel: Reference to the data class field that contains the data model</li>
<li>rulesPackage: The name of the package that conains the rules for the root page. E.g. for the DataGatheringPage dialog's rules are in the package ContextBaseRule.dg therefore the package is dg.</li>
</ol>

in case your datamodel is put inside another bigger wrapper object, we can use this attribute to specify that wrapper, ex:  ,
<pre class="brush: xhtml">
&lt;gui:eventListeners  
rulesPackage=&quot;dg&quot; 
dataModel=&quot;#{data.dossierWrapper.entityDossier}&quot;
dialogData=&quot;#{data}&quot; 
dataModelWrapper=&quot;#{data.dossierWrapper}&quot; /&gt;
</pre>
Then in the java code, you ca access this wrapper by GuiFrameworkManagedBean.getPageContext().getRootDataModelWrapper()

And make sure to add the xmlns declartion:
<pre class="brush: html">
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
      [...]
      xmlns:gui=&quot;http://axonivy.com/gui/components&quot; /&gt;
</pre> 
Remember to add into component and also assign it to startMethod
<pre class="brush: html">
&lt;cc:interface componentType=&quot;IvyComponent&quot;&gt;
       &lt;cc:attribute name=&quot;dataModel&quot;/&gt;
&lt;/cc:interface&gt;
</pre> 

And make sure all pages having add library like below, you can put this code into your template file and insert all pages which you want to apply GUI framework
<pre class="brush: html">
&lt;h:outputScript library=&quot;ivy-webcontent&quot; name=&quot;/resources/util/lodash.min.js&quot; /&gt;
&lt;h:outputScript library=&quot;ivy-webcontent&quot; name=&quot;/resources/js/fintechHandlingComponent.js?v=#{cachedVersionResolver.version}&quot;/&gt;
</pre> 

</div>